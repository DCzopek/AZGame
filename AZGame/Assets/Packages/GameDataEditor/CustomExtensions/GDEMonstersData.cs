// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\UnityProjectsGit\AZGame\AZGame\Assets/Packages/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEMonstersData : IGDEData
    {
        static string HealthPointsKey = "HealthPoints";
		float _HealthPoints;
        public float HealthPoints
        {
            get { return _HealthPoints; }
            set {
                if (_HealthPoints != value)
                {
                    _HealthPoints = value;
					GDEDataManager.SetFloat(_key, HealthPointsKey, _HealthPoints);
                }
            }
        }

        static string BasicMeleeLowKey = "BasicMeleeLow";
		float _BasicMeleeLow;
        public float BasicMeleeLow
        {
            get { return _BasicMeleeLow; }
            set {
                if (_BasicMeleeLow != value)
                {
                    _BasicMeleeLow = value;
					GDEDataManager.SetFloat(_key, BasicMeleeLowKey, _BasicMeleeLow);
                }
            }
        }

        static string BasicDistanceLowKey = "BasicDistanceLow";
		float _BasicDistanceLow;
        public float BasicDistanceLow
        {
            get { return _BasicDistanceLow; }
            set {
                if (_BasicDistanceLow != value)
                {
                    _BasicDistanceLow = value;
					GDEDataManager.SetFloat(_key, BasicDistanceLowKey, _BasicDistanceLow);
                }
            }
        }

        static string BasicMagicLowKey = "BasicMagicLow";
		float _BasicMagicLow;
        public float BasicMagicLow
        {
            get { return _BasicMagicLow; }
            set {
                if (_BasicMagicLow != value)
                {
                    _BasicMagicLow = value;
					GDEDataManager.SetFloat(_key, BasicMagicLowKey, _BasicMagicLow);
                }
            }
        }

        static string MonsterNameKey = "MonsterName";
		string _MonsterName;
        public string MonsterName
        {
            get { return _MonsterName; }
            set {
                if (_MonsterName != value)
                {
                    _MonsterName = value;
					GDEDataManager.SetString(_key, MonsterNameKey, _MonsterName);
                }
            }
        }

        static string MonsterTypeKey = "MonsterType";
		string _MonsterType;
        public string MonsterType
        {
            get { return _MonsterType; }
            set {
                if (_MonsterType != value)
                {
                    _MonsterType = value;
					GDEDataManager.SetString(_key, MonsterTypeKey, _MonsterType);
                }
            }
        }

        static string MonsterDescriptionKey = "MonsterDescription";
		string _MonsterDescription;
        public string MonsterDescription
        {
            get { return _MonsterDescription; }
            set {
                if (_MonsterDescription != value)
                {
                    _MonsterDescription = value;
					GDEDataManager.SetString(_key, MonsterDescriptionKey, _MonsterDescription);
                }
            }
        }

        static string DifficultyLevelKey = "DifficultyLevel";
		string _DifficultyLevel;
        public string DifficultyLevel
        {
            get { return _DifficultyLevel; }
            set {
                if (_DifficultyLevel != value)
                {
                    _DifficultyLevel = value;
					GDEDataManager.SetString(_key, DifficultyLevelKey, _DifficultyLevel);
                }
            }
        }

        public GDEMonstersData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Monsters");
			
            dict.Merge(true, HealthPoints.ToGDEDict(HealthPointsKey));
            dict.Merge(true, BasicMeleeLow.ToGDEDict(BasicMeleeLowKey));
            dict.Merge(true, BasicDistanceLow.ToGDEDict(BasicDistanceLowKey));
            dict.Merge(true, BasicMagicLow.ToGDEDict(BasicMagicLowKey));
            dict.Merge(true, MonsterName.ToGDEDict(MonsterNameKey));
            dict.Merge(true, MonsterType.ToGDEDict(MonsterTypeKey));
            dict.Merge(true, MonsterDescription.ToGDEDict(MonsterDescriptionKey));
            dict.Merge(true, DifficultyLevel.ToGDEDict(DifficultyLevelKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetFloat(HealthPointsKey, out _HealthPoints);
                dict.TryGetFloat(BasicMeleeLowKey, out _BasicMeleeLow);
                dict.TryGetFloat(BasicDistanceLowKey, out _BasicDistanceLow);
                dict.TryGetFloat(BasicMagicLowKey, out _BasicMagicLow);
                dict.TryGetString(MonsterNameKey, out _MonsterName);
                dict.TryGetString(MonsterTypeKey, out _MonsterType);
                dict.TryGetString(MonsterDescriptionKey, out _MonsterDescription);
                dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _HealthPoints = GDEDataManager.GetFloat(_key, HealthPointsKey, _HealthPoints);
            _BasicMeleeLow = GDEDataManager.GetFloat(_key, BasicMeleeLowKey, _BasicMeleeLow);
            _BasicDistanceLow = GDEDataManager.GetFloat(_key, BasicDistanceLowKey, _BasicDistanceLow);
            _BasicMagicLow = GDEDataManager.GetFloat(_key, BasicMagicLowKey, _BasicMagicLow);
            _MonsterName = GDEDataManager.GetString(_key, MonsterNameKey, _MonsterName);
            _MonsterType = GDEDataManager.GetString(_key, MonsterTypeKey, _MonsterType);
            _MonsterDescription = GDEDataManager.GetString(_key, MonsterDescriptionKey, _MonsterDescription);
            _DifficultyLevel = GDEDataManager.GetString(_key, DifficultyLevelKey, _DifficultyLevel);
        }

        public GDEMonstersData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEMonstersData newClone = new GDEMonstersData(newKey);

            newClone.HealthPoints = HealthPoints;
            newClone.BasicMeleeLow = BasicMeleeLow;
            newClone.BasicDistanceLow = BasicDistanceLow;
            newClone.BasicMagicLow = BasicMagicLow;
            newClone.MonsterName = MonsterName;
            newClone.MonsterType = MonsterType;
            newClone.MonsterDescription = MonsterDescription;
            newClone.DifficultyLevel = DifficultyLevel;

            return newClone;
		}

        public GDEMonstersData DeepClone()
		{
			GDEMonstersData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_HealthPoints()
        {
            GDEDataManager.ResetToDefault(_key, HealthPointsKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(HealthPointsKey, out _HealthPoints);
        }

        public void Reset_BasicMeleeLow()
        {
            GDEDataManager.ResetToDefault(_key, BasicMeleeLowKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicMeleeLowKey, out _BasicMeleeLow);
        }

        public void Reset_BasicDistanceLow()
        {
            GDEDataManager.ResetToDefault(_key, BasicDistanceLowKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicDistanceLowKey, out _BasicDistanceLow);
        }

        public void Reset_BasicMagicLow()
        {
            GDEDataManager.ResetToDefault(_key, BasicMagicLowKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicMagicLowKey, out _BasicMagicLow);
        }

        public void Reset_MonsterName()
        {
            GDEDataManager.ResetToDefault(_key, MonsterNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MonsterNameKey, out _MonsterName);
        }

        public void Reset_MonsterType()
        {
            GDEDataManager.ResetToDefault(_key, MonsterTypeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MonsterTypeKey, out _MonsterType);
        }

        public void Reset_MonsterDescription()
        {
            GDEDataManager.ResetToDefault(_key, MonsterDescriptionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MonsterDescriptionKey, out _MonsterDescription);
        }

        public void Reset_DifficultyLevel()
        {
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, MonsterNameKey);
            GDEDataManager.ResetToDefault(_key, MonsterTypeKey);
            GDEDataManager.ResetToDefault(_key, MonsterDescriptionKey);
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);
            GDEDataManager.ResetToDefault(_key, HealthPointsKey);
            GDEDataManager.ResetToDefault(_key, BasicMeleeLowKey);
            GDEDataManager.ResetToDefault(_key, BasicDistanceLowKey);
            GDEDataManager.ResetToDefault(_key, BasicMagicLowKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
