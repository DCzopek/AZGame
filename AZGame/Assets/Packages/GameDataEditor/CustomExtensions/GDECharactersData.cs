// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\UnityProjectsGit\AZGame\AZGame\Assets/Packages/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDECharactersData : IGDEData
    {
        static string HealthPointsKey = "HealthPoints";
		float _HealthPoints;
        public float HealthPoints
        {
            get { return _HealthPoints; }
            set {
                if (_HealthPoints != value)
                {
                    _HealthPoints = value;
					GDEDataManager.SetFloat(_key, HealthPointsKey, _HealthPoints);
                }
            }
        }

        static string ExperienceKey = "Experience";
		float _Experience;
        public float Experience
        {
            get { return _Experience; }
            set {
                if (_Experience != value)
                {
                    _Experience = value;
					GDEDataManager.SetFloat(_key, ExperienceKey, _Experience);
                }
            }
        }

        static string LevelKey = "Level";
		float _Level;
        public float Level
        {
            get { return _Level; }
            set {
                if (_Level != value)
                {
                    _Level = value;
					GDEDataManager.SetFloat(_key, LevelKey, _Level);
                }
            }
        }

        static string BasicMeleeKey = "BasicMelee";
		float _BasicMelee;
        public float BasicMelee
        {
            get { return _BasicMelee; }
            set {
                if (_BasicMelee != value)
                {
                    _BasicMelee = value;
					GDEDataManager.SetFloat(_key, BasicMeleeKey, _BasicMelee);
                }
            }
        }

        static string BasicDistanceKey = "BasicDistance";
		float _BasicDistance;
        public float BasicDistance
        {
            get { return _BasicDistance; }
            set {
                if (_BasicDistance != value)
                {
                    _BasicDistance = value;
					GDEDataManager.SetFloat(_key, BasicDistanceKey, _BasicDistance);
                }
            }
        }

        static string BasicMagicKey = "BasicMagic";
		float _BasicMagic;
        public float BasicMagic
        {
            get { return _BasicMagic; }
            set {
                if (_BasicMagic != value)
                {
                    _BasicMagic = value;
					GDEDataManager.SetFloat(_key, BasicMagicKey, _BasicMagic);
                }
            }
        }

        static string CharacterNameKey = "CharacterName";
		string _CharacterName;
        public string CharacterName
        {
            get { return _CharacterName; }
            set {
                if (_CharacterName != value)
                {
                    _CharacterName = value;
					GDEDataManager.SetString(_key, CharacterNameKey, _CharacterName);
                }
            }
        }

        static string CharacterDescriptionKey = "CharacterDescription";
		string _CharacterDescription;
        public string CharacterDescription
        {
            get { return _CharacterDescription; }
            set {
                if (_CharacterDescription != value)
                {
                    _CharacterDescription = value;
					GDEDataManager.SetString(_key, CharacterDescriptionKey, _CharacterDescription);
                }
            }
        }

        static string DifficultyLevelKey = "DifficultyLevel";
		string _DifficultyLevel;
        public string DifficultyLevel
        {
            get { return _DifficultyLevel; }
            set {
                if (_DifficultyLevel != value)
                {
                    _DifficultyLevel = value;
					GDEDataManager.SetString(_key, DifficultyLevelKey, _DifficultyLevel);
                }
            }
        }

        public GDECharactersData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Characters");
			
            dict.Merge(true, HealthPoints.ToGDEDict(HealthPointsKey));
            dict.Merge(true, Experience.ToGDEDict(ExperienceKey));
            dict.Merge(true, Level.ToGDEDict(LevelKey));
            dict.Merge(true, BasicMelee.ToGDEDict(BasicMeleeKey));
            dict.Merge(true, BasicDistance.ToGDEDict(BasicDistanceKey));
            dict.Merge(true, BasicMagic.ToGDEDict(BasicMagicKey));
            dict.Merge(true, CharacterName.ToGDEDict(CharacterNameKey));
            dict.Merge(true, CharacterDescription.ToGDEDict(CharacterDescriptionKey));
            dict.Merge(true, DifficultyLevel.ToGDEDict(DifficultyLevelKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetFloat(HealthPointsKey, out _HealthPoints);
                dict.TryGetFloat(ExperienceKey, out _Experience);
                dict.TryGetFloat(LevelKey, out _Level);
                dict.TryGetFloat(BasicMeleeKey, out _BasicMelee);
                dict.TryGetFloat(BasicDistanceKey, out _BasicDistance);
                dict.TryGetFloat(BasicMagicKey, out _BasicMagic);
                dict.TryGetString(CharacterNameKey, out _CharacterName);
                dict.TryGetString(CharacterDescriptionKey, out _CharacterDescription);
                dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _HealthPoints = GDEDataManager.GetFloat(_key, HealthPointsKey, _HealthPoints);
            _Experience = GDEDataManager.GetFloat(_key, ExperienceKey, _Experience);
            _Level = GDEDataManager.GetFloat(_key, LevelKey, _Level);
            _BasicMelee = GDEDataManager.GetFloat(_key, BasicMeleeKey, _BasicMelee);
            _BasicDistance = GDEDataManager.GetFloat(_key, BasicDistanceKey, _BasicDistance);
            _BasicMagic = GDEDataManager.GetFloat(_key, BasicMagicKey, _BasicMagic);
            _CharacterName = GDEDataManager.GetString(_key, CharacterNameKey, _CharacterName);
            _CharacterDescription = GDEDataManager.GetString(_key, CharacterDescriptionKey, _CharacterDescription);
            _DifficultyLevel = GDEDataManager.GetString(_key, DifficultyLevelKey, _DifficultyLevel);
        }

        public GDECharactersData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDECharactersData newClone = new GDECharactersData(newKey);

            newClone.HealthPoints = HealthPoints;
            newClone.Experience = Experience;
            newClone.Level = Level;
            newClone.BasicMelee = BasicMelee;
            newClone.BasicDistance = BasicDistance;
            newClone.BasicMagic = BasicMagic;
            newClone.CharacterName = CharacterName;
            newClone.CharacterDescription = CharacterDescription;
            newClone.DifficultyLevel = DifficultyLevel;

            return newClone;
		}

        public GDECharactersData DeepClone()
		{
			GDECharactersData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_HealthPoints()
        {
            GDEDataManager.ResetToDefault(_key, HealthPointsKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(HealthPointsKey, out _HealthPoints);
        }

        public void Reset_Experience()
        {
            GDEDataManager.ResetToDefault(_key, ExperienceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(ExperienceKey, out _Experience);
        }

        public void Reset_Level()
        {
            GDEDataManager.ResetToDefault(_key, LevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(LevelKey, out _Level);
        }

        public void Reset_BasicMelee()
        {
            GDEDataManager.ResetToDefault(_key, BasicMeleeKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicMeleeKey, out _BasicMelee);
        }

        public void Reset_BasicDistance()
        {
            GDEDataManager.ResetToDefault(_key, BasicDistanceKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicDistanceKey, out _BasicDistance);
        }

        public void Reset_BasicMagic()
        {
            GDEDataManager.ResetToDefault(_key, BasicMagicKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(BasicMagicKey, out _BasicMagic);
        }

        public void Reset_CharacterName()
        {
            GDEDataManager.ResetToDefault(_key, CharacterNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(CharacterNameKey, out _CharacterName);
        }

        public void Reset_CharacterDescription()
        {
            GDEDataManager.ResetToDefault(_key, CharacterDescriptionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(CharacterDescriptionKey, out _CharacterDescription);
        }

        public void Reset_DifficultyLevel()
        {
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, CharacterNameKey);
            GDEDataManager.ResetToDefault(_key, CharacterDescriptionKey);
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);
            GDEDataManager.ResetToDefault(_key, HealthPointsKey);
            GDEDataManager.ResetToDefault(_key, ExperienceKey);
            GDEDataManager.ResetToDefault(_key, LevelKey);
            GDEDataManager.ResetToDefault(_key, BasicMeleeKey);
            GDEDataManager.ResetToDefault(_key, BasicDistanceKey);
            GDEDataManager.ResetToDefault(_key, BasicMagicKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
