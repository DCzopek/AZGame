// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\UnityProjectsGit\AZGame\AZGame\Assets/Packages/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEMissionsData : IGDEData
    {
        static string MissionLevelKey = "MissionLevel";
		float _MissionLevel;
        public float MissionLevel
        {
            get { return _MissionLevel; }
            set {
                if (_MissionLevel != value)
                {
                    _MissionLevel = value;
					GDEDataManager.SetFloat(_key, MissionLevelKey, _MissionLevel);
                }
            }
        }

        static string MeleeRewardKey = "MeleeReward";
		float _MeleeReward;
        public float MeleeReward
        {
            get { return _MeleeReward; }
            set {
                if (_MeleeReward != value)
                {
                    _MeleeReward = value;
					GDEDataManager.SetFloat(_key, MeleeRewardKey, _MeleeReward);
                }
            }
        }

        static string DistanceRewardKey = "DistanceReward";
		float _DistanceReward;
        public float DistanceReward
        {
            get { return _DistanceReward; }
            set {
                if (_DistanceReward != value)
                {
                    _DistanceReward = value;
					GDEDataManager.SetFloat(_key, DistanceRewardKey, _DistanceReward);
                }
            }
        }

        static string MagicRewardKey = "MagicReward";
		float _MagicReward;
        public float MagicReward
        {
            get { return _MagicReward; }
            set {
                if (_MagicReward != value)
                {
                    _MagicReward = value;
					GDEDataManager.SetFloat(_key, MagicRewardKey, _MagicReward);
                }
            }
        }

        static string FirstCardKey = "FirstCard";
		string _FirstCard;
        public string FirstCard
        {
            get { return _FirstCard; }
            set {
                if (_FirstCard != value)
                {
                    _FirstCard = value;
					GDEDataManager.SetString(_key, FirstCardKey, _FirstCard);
                }
            }
        }

        static string MissionNameKey = "MissionName";
		string _MissionName;
        public string MissionName
        {
            get { return _MissionName; }
            set {
                if (_MissionName != value)
                {
                    _MissionName = value;
					GDEDataManager.SetString(_key, MissionNameKey, _MissionName);
                }
            }
        }

        static string MissionDescriptionKey = "MissionDescription";
		string _MissionDescription;
        public string MissionDescription
        {
            get { return _MissionDescription; }
            set {
                if (_MissionDescription != value)
                {
                    _MissionDescription = value;
					GDEDataManager.SetString(_key, MissionDescriptionKey, _MissionDescription);
                }
            }
        }

        static string DifficultyLevelKey = "DifficultyLevel";
		string _DifficultyLevel;
        public string DifficultyLevel
        {
            get { return _DifficultyLevel; }
            set {
                if (_DifficultyLevel != value)
                {
                    _DifficultyLevel = value;
					GDEDataManager.SetString(_key, DifficultyLevelKey, _DifficultyLevel);
                }
            }
        }

        static string FirstChooseKey = "FirstChoose";
		string _FirstChoose;
        public string FirstChoose
        {
            get { return _FirstChoose; }
            set {
                if (_FirstChoose != value)
                {
                    _FirstChoose = value;
					GDEDataManager.SetString(_key, FirstChooseKey, _FirstChoose);
                }
            }
        }

        static string FirstNextKey = "FirstNext";
		string _FirstNext;
        public string FirstNext
        {
            get { return _FirstNext; }
            set {
                if (_FirstNext != value)
                {
                    _FirstNext = value;
					GDEDataManager.SetString(_key, FirstNextKey, _FirstNext);
                }
            }
        }

        static string SecondChooseKey = "SecondChoose";
		string _SecondChoose;
        public string SecondChoose
        {
            get { return _SecondChoose; }
            set {
                if (_SecondChoose != value)
                {
                    _SecondChoose = value;
					GDEDataManager.SetString(_key, SecondChooseKey, _SecondChoose);
                }
            }
        }

        static string SecondNextKey = "SecondNext";
		string _SecondNext;
        public string SecondNext
        {
            get { return _SecondNext; }
            set {
                if (_SecondNext != value)
                {
                    _SecondNext = value;
					GDEDataManager.SetString(_key, SecondNextKey, _SecondNext);
                }
            }
        }

        static string ThirdChooseKey = "ThirdChoose";
		string _ThirdChoose;
        public string ThirdChoose
        {
            get { return _ThirdChoose; }
            set {
                if (_ThirdChoose != value)
                {
                    _ThirdChoose = value;
					GDEDataManager.SetString(_key, ThirdChooseKey, _ThirdChoose);
                }
            }
        }

        static string ThirdNextKey = "ThirdNext";
		string _ThirdNext;
        public string ThirdNext
        {
            get { return _ThirdNext; }
            set {
                if (_ThirdNext != value)
                {
                    _ThirdNext = value;
					GDEDataManager.SetString(_key, ThirdNextKey, _ThirdNext);
                }
            }
        }

        static string ForthChooseKey = "ForthChoose";
		string _ForthChoose;
        public string ForthChoose
        {
            get { return _ForthChoose; }
            set {
                if (_ForthChoose != value)
                {
                    _ForthChoose = value;
					GDEDataManager.SetString(_key, ForthChooseKey, _ForthChoose);
                }
            }
        }

        static string ForthNextKey = "ForthNext";
		string _ForthNext;
        public string ForthNext
        {
            get { return _ForthNext; }
            set {
                if (_ForthNext != value)
                {
                    _ForthNext = value;
					GDEDataManager.SetString(_key, ForthNextKey, _ForthNext);
                }
            }
        }

        public GDEMissionsData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Missions");
			
            dict.Merge(true, MissionLevel.ToGDEDict(MissionLevelKey));
            dict.Merge(true, MeleeReward.ToGDEDict(MeleeRewardKey));
            dict.Merge(true, DistanceReward.ToGDEDict(DistanceRewardKey));
            dict.Merge(true, MagicReward.ToGDEDict(MagicRewardKey));
            dict.Merge(true, FirstCard.ToGDEDict(FirstCardKey));
            dict.Merge(true, MissionName.ToGDEDict(MissionNameKey));
            dict.Merge(true, MissionDescription.ToGDEDict(MissionDescriptionKey));
            dict.Merge(true, DifficultyLevel.ToGDEDict(DifficultyLevelKey));
            dict.Merge(true, FirstChoose.ToGDEDict(FirstChooseKey));
            dict.Merge(true, FirstNext.ToGDEDict(FirstNextKey));
            dict.Merge(true, SecondChoose.ToGDEDict(SecondChooseKey));
            dict.Merge(true, SecondNext.ToGDEDict(SecondNextKey));
            dict.Merge(true, ThirdChoose.ToGDEDict(ThirdChooseKey));
            dict.Merge(true, ThirdNext.ToGDEDict(ThirdNextKey));
            dict.Merge(true, ForthChoose.ToGDEDict(ForthChooseKey));
            dict.Merge(true, ForthNext.ToGDEDict(ForthNextKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetFloat(MissionLevelKey, out _MissionLevel);
                dict.TryGetFloat(MeleeRewardKey, out _MeleeReward);
                dict.TryGetFloat(DistanceRewardKey, out _DistanceReward);
                dict.TryGetFloat(MagicRewardKey, out _MagicReward);
                dict.TryGetString(FirstCardKey, out _FirstCard);
                dict.TryGetString(MissionNameKey, out _MissionName);
                dict.TryGetString(MissionDescriptionKey, out _MissionDescription);
                dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
                dict.TryGetString(FirstChooseKey, out _FirstChoose);
                dict.TryGetString(FirstNextKey, out _FirstNext);
                dict.TryGetString(SecondChooseKey, out _SecondChoose);
                dict.TryGetString(SecondNextKey, out _SecondNext);
                dict.TryGetString(ThirdChooseKey, out _ThirdChoose);
                dict.TryGetString(ThirdNextKey, out _ThirdNext);
                dict.TryGetString(ForthChooseKey, out _ForthChoose);
                dict.TryGetString(ForthNextKey, out _ForthNext);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _MissionLevel = GDEDataManager.GetFloat(_key, MissionLevelKey, _MissionLevel);
            _MeleeReward = GDEDataManager.GetFloat(_key, MeleeRewardKey, _MeleeReward);
            _DistanceReward = GDEDataManager.GetFloat(_key, DistanceRewardKey, _DistanceReward);
            _MagicReward = GDEDataManager.GetFloat(_key, MagicRewardKey, _MagicReward);
            _FirstCard = GDEDataManager.GetString(_key, FirstCardKey, _FirstCard);
            _MissionName = GDEDataManager.GetString(_key, MissionNameKey, _MissionName);
            _MissionDescription = GDEDataManager.GetString(_key, MissionDescriptionKey, _MissionDescription);
            _DifficultyLevel = GDEDataManager.GetString(_key, DifficultyLevelKey, _DifficultyLevel);
            _FirstChoose = GDEDataManager.GetString(_key, FirstChooseKey, _FirstChoose);
            _FirstNext = GDEDataManager.GetString(_key, FirstNextKey, _FirstNext);
            _SecondChoose = GDEDataManager.GetString(_key, SecondChooseKey, _SecondChoose);
            _SecondNext = GDEDataManager.GetString(_key, SecondNextKey, _SecondNext);
            _ThirdChoose = GDEDataManager.GetString(_key, ThirdChooseKey, _ThirdChoose);
            _ThirdNext = GDEDataManager.GetString(_key, ThirdNextKey, _ThirdNext);
            _ForthChoose = GDEDataManager.GetString(_key, ForthChooseKey, _ForthChoose);
            _ForthNext = GDEDataManager.GetString(_key, ForthNextKey, _ForthNext);
        }

        public GDEMissionsData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEMissionsData newClone = new GDEMissionsData(newKey);

            newClone.MissionLevel = MissionLevel;
            newClone.MeleeReward = MeleeReward;
            newClone.DistanceReward = DistanceReward;
            newClone.MagicReward = MagicReward;
            newClone.FirstCard = FirstCard;
            newClone.MissionName = MissionName;
            newClone.MissionDescription = MissionDescription;
            newClone.DifficultyLevel = DifficultyLevel;
            newClone.FirstChoose = FirstChoose;
            newClone.FirstNext = FirstNext;
            newClone.SecondChoose = SecondChoose;
            newClone.SecondNext = SecondNext;
            newClone.ThirdChoose = ThirdChoose;
            newClone.ThirdNext = ThirdNext;
            newClone.ForthChoose = ForthChoose;
            newClone.ForthNext = ForthNext;

            return newClone;
		}

        public GDEMissionsData DeepClone()
		{
			GDEMissionsData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_MissionLevel()
        {
            GDEDataManager.ResetToDefault(_key, MissionLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(MissionLevelKey, out _MissionLevel);
        }

        public void Reset_MeleeReward()
        {
            GDEDataManager.ResetToDefault(_key, MeleeRewardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(MeleeRewardKey, out _MeleeReward);
        }

        public void Reset_DistanceReward()
        {
            GDEDataManager.ResetToDefault(_key, DistanceRewardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(DistanceRewardKey, out _DistanceReward);
        }

        public void Reset_MagicReward()
        {
            GDEDataManager.ResetToDefault(_key, MagicRewardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(MagicRewardKey, out _MagicReward);
        }

        public void Reset_FirstCard()
        {
            GDEDataManager.ResetToDefault(_key, FirstCardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(FirstCardKey, out _FirstCard);
        }

        public void Reset_MissionName()
        {
            GDEDataManager.ResetToDefault(_key, MissionNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MissionNameKey, out _MissionName);
        }

        public void Reset_MissionDescription()
        {
            GDEDataManager.ResetToDefault(_key, MissionDescriptionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MissionDescriptionKey, out _MissionDescription);
        }

        public void Reset_DifficultyLevel()
        {
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(DifficultyLevelKey, out _DifficultyLevel);
        }

        public void Reset_FirstChoose()
        {
            GDEDataManager.ResetToDefault(_key, FirstChooseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(FirstChooseKey, out _FirstChoose);
        }

        public void Reset_FirstNext()
        {
            GDEDataManager.ResetToDefault(_key, FirstNextKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(FirstNextKey, out _FirstNext);
        }

        public void Reset_SecondChoose()
        {
            GDEDataManager.ResetToDefault(_key, SecondChooseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(SecondChooseKey, out _SecondChoose);
        }

        public void Reset_SecondNext()
        {
            GDEDataManager.ResetToDefault(_key, SecondNextKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(SecondNextKey, out _SecondNext);
        }

        public void Reset_ThirdChoose()
        {
            GDEDataManager.ResetToDefault(_key, ThirdChooseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ThirdChooseKey, out _ThirdChoose);
        }

        public void Reset_ThirdNext()
        {
            GDEDataManager.ResetToDefault(_key, ThirdNextKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ThirdNextKey, out _ThirdNext);
        }

        public void Reset_ForthChoose()
        {
            GDEDataManager.ResetToDefault(_key, ForthChooseKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ForthChooseKey, out _ForthChoose);
        }

        public void Reset_ForthNext()
        {
            GDEDataManager.ResetToDefault(_key, ForthNextKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ForthNextKey, out _ForthNext);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, FirstCardKey);
            GDEDataManager.ResetToDefault(_key, MissionNameKey);
            GDEDataManager.ResetToDefault(_key, MissionDescriptionKey);
            GDEDataManager.ResetToDefault(_key, MissionLevelKey);
            GDEDataManager.ResetToDefault(_key, DifficultyLevelKey);
            GDEDataManager.ResetToDefault(_key, MeleeRewardKey);
            GDEDataManager.ResetToDefault(_key, DistanceRewardKey);
            GDEDataManager.ResetToDefault(_key, MagicRewardKey);
            GDEDataManager.ResetToDefault(_key, FirstChooseKey);
            GDEDataManager.ResetToDefault(_key, FirstNextKey);
            GDEDataManager.ResetToDefault(_key, SecondChooseKey);
            GDEDataManager.ResetToDefault(_key, SecondNextKey);
            GDEDataManager.ResetToDefault(_key, ThirdChooseKey);
            GDEDataManager.ResetToDefault(_key, ThirdNextKey);
            GDEDataManager.ResetToDefault(_key, ForthChooseKey);
            GDEDataManager.ResetToDefault(_key, ForthNextKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
