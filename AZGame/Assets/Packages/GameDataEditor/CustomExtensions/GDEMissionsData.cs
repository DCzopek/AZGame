// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      D:\UnityProjectsGit\AZGame\AZGame\Assets/Packages/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEMissionsData : IGDEData
    {
        static string FirstCardKey = "FirstCard";
		bool _FirstCard;
        public bool FirstCard
        {
            get { return _FirstCard; }
            set {
                if (_FirstCard != value)
                {
                    _FirstCard = value;
					GDEDataManager.SetBool(_key, FirstCardKey, _FirstCard);
                }
            }
        }

        static string FightKey = "Fight";
		bool _Fight;
        public bool Fight
        {
            get { return _Fight; }
            set {
                if (_Fight != value)
                {
                    _Fight = value;
					GDEDataManager.SetBool(_key, FightKey, _Fight);
                }
            }
        }

        static string MissionLevelKey = "MissionLevel";
		float _MissionLevel;
        public float MissionLevel
        {
            get { return _MissionLevel; }
            set {
                if (_MissionLevel != value)
                {
                    _MissionLevel = value;
					GDEDataManager.SetFloat(_key, MissionLevelKey, _MissionLevel);
                }
            }
        }

        static string MissionNameKey = "MissionName";
		string _MissionName;
        public string MissionName
        {
            get { return _MissionName; }
            set {
                if (_MissionName != value)
                {
                    _MissionName = value;
					GDEDataManager.SetString(_key, MissionNameKey, _MissionName);
                }
            }
        }

        static string MissionDescriptionKey = "MissionDescription";
		string _MissionDescription;
        public string MissionDescription
        {
            get { return _MissionDescription; }
            set {
                if (_MissionDescription != value)
                {
                    _MissionDescription = value;
					GDEDataManager.SetString(_key, MissionDescriptionKey, _MissionDescription);
                }
            }
        }

        static string NextCardKey = "NextCard";
		string _NextCard;
        public string NextCard
        {
            get { return _NextCard; }
            set {
                if (_NextCard != value)
                {
                    _NextCard = value;
					GDEDataManager.SetString(_key, NextCardKey, _NextCard);
                }
            }
        }

        static string AnswerAKey = "AnswerA";
		string _AnswerA;
        public string AnswerA
        {
            get { return _AnswerA; }
            set {
                if (_AnswerA != value)
                {
                    _AnswerA = value;
					GDEDataManager.SetString(_key, AnswerAKey, _AnswerA);
                }
            }
        }

        static string AnswerBKey = "AnswerB";
		string _AnswerB;
        public string AnswerB
        {
            get { return _AnswerB; }
            set {
                if (_AnswerB != value)
                {
                    _AnswerB = value;
					GDEDataManager.SetString(_key, AnswerBKey, _AnswerB);
                }
            }
        }

        static string AnswerCKey = "AnswerC";
		string _AnswerC;
        public string AnswerC
        {
            get { return _AnswerC; }
            set {
                if (_AnswerC != value)
                {
                    _AnswerC = value;
					GDEDataManager.SetString(_key, AnswerCKey, _AnswerC);
                }
            }
        }

        static string AnswerDKey = "AnswerD";
		string _AnswerD;
        public string AnswerD
        {
            get { return _AnswerD; }
            set {
                if (_AnswerD != value)
                {
                    _AnswerD = value;
					GDEDataManager.SetString(_key, AnswerDKey, _AnswerD);
                }
            }
        }

        public GDEMissionsData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Missions");
			
            dict.Merge(true, FirstCard.ToGDEDict(FirstCardKey));
            dict.Merge(true, Fight.ToGDEDict(FightKey));
            dict.Merge(true, MissionLevel.ToGDEDict(MissionLevelKey));
            dict.Merge(true, MissionName.ToGDEDict(MissionNameKey));
            dict.Merge(true, MissionDescription.ToGDEDict(MissionDescriptionKey));
            dict.Merge(true, NextCard.ToGDEDict(NextCardKey));
            dict.Merge(true, AnswerA.ToGDEDict(AnswerAKey));
            dict.Merge(true, AnswerB.ToGDEDict(AnswerBKey));
            dict.Merge(true, AnswerC.ToGDEDict(AnswerCKey));
            dict.Merge(true, AnswerD.ToGDEDict(AnswerDKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(FirstCardKey, out _FirstCard);
                dict.TryGetBool(FightKey, out _Fight);
                dict.TryGetFloat(MissionLevelKey, out _MissionLevel);
                dict.TryGetString(MissionNameKey, out _MissionName);
                dict.TryGetString(MissionDescriptionKey, out _MissionDescription);
                dict.TryGetString(NextCardKey, out _NextCard);
                dict.TryGetString(AnswerAKey, out _AnswerA);
                dict.TryGetString(AnswerBKey, out _AnswerB);
                dict.TryGetString(AnswerCKey, out _AnswerC);
                dict.TryGetString(AnswerDKey, out _AnswerD);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _FirstCard = GDEDataManager.GetBool(_key, FirstCardKey, _FirstCard);
            _Fight = GDEDataManager.GetBool(_key, FightKey, _Fight);
            _MissionLevel = GDEDataManager.GetFloat(_key, MissionLevelKey, _MissionLevel);
            _MissionName = GDEDataManager.GetString(_key, MissionNameKey, _MissionName);
            _MissionDescription = GDEDataManager.GetString(_key, MissionDescriptionKey, _MissionDescription);
            _NextCard = GDEDataManager.GetString(_key, NextCardKey, _NextCard);
            _AnswerA = GDEDataManager.GetString(_key, AnswerAKey, _AnswerA);
            _AnswerB = GDEDataManager.GetString(_key, AnswerBKey, _AnswerB);
            _AnswerC = GDEDataManager.GetString(_key, AnswerCKey, _AnswerC);
            _AnswerD = GDEDataManager.GetString(_key, AnswerDKey, _AnswerD);
        }

        public GDEMissionsData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEMissionsData newClone = new GDEMissionsData(newKey);

            newClone.FirstCard = FirstCard;
            newClone.Fight = Fight;
            newClone.MissionLevel = MissionLevel;
            newClone.MissionName = MissionName;
            newClone.MissionDescription = MissionDescription;
            newClone.NextCard = NextCard;
            newClone.AnswerA = AnswerA;
            newClone.AnswerB = AnswerB;
            newClone.AnswerC = AnswerC;
            newClone.AnswerD = AnswerD;

            return newClone;
		}

        public GDEMissionsData DeepClone()
		{
			GDEMissionsData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_FirstCard()
        {
            GDEDataManager.ResetToDefault(_key, FirstCardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(FirstCardKey, out _FirstCard);
        }

        public void Reset_Fight()
        {
            GDEDataManager.ResetToDefault(_key, FightKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(FightKey, out _Fight);
        }

        public void Reset_MissionLevel()
        {
            GDEDataManager.ResetToDefault(_key, MissionLevelKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(MissionLevelKey, out _MissionLevel);
        }

        public void Reset_MissionName()
        {
            GDEDataManager.ResetToDefault(_key, MissionNameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MissionNameKey, out _MissionName);
        }

        public void Reset_MissionDescription()
        {
            GDEDataManager.ResetToDefault(_key, MissionDescriptionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(MissionDescriptionKey, out _MissionDescription);
        }

        public void Reset_NextCard()
        {
            GDEDataManager.ResetToDefault(_key, NextCardKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(NextCardKey, out _NextCard);
        }

        public void Reset_AnswerA()
        {
            GDEDataManager.ResetToDefault(_key, AnswerAKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerAKey, out _AnswerA);
        }

        public void Reset_AnswerB()
        {
            GDEDataManager.ResetToDefault(_key, AnswerBKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerBKey, out _AnswerB);
        }

        public void Reset_AnswerC()
        {
            GDEDataManager.ResetToDefault(_key, AnswerCKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerCKey, out _AnswerC);
        }

        public void Reset_AnswerD()
        {
            GDEDataManager.ResetToDefault(_key, AnswerDKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerDKey, out _AnswerD);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, FirstCardKey);
            GDEDataManager.ResetToDefault(_key, MissionNameKey);
            GDEDataManager.ResetToDefault(_key, MissionDescriptionKey);
            GDEDataManager.ResetToDefault(_key, MissionLevelKey);
            GDEDataManager.ResetToDefault(_key, NextCardKey);
            GDEDataManager.ResetToDefault(_key, AnswerAKey);
            GDEDataManager.ResetToDefault(_key, AnswerBKey);
            GDEDataManager.ResetToDefault(_key, AnswerCKey);
            GDEDataManager.ResetToDefault(_key, AnswerDKey);
            GDEDataManager.ResetToDefault(_key, FightKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
